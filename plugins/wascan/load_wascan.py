
import sys
import json
import os
import sqlite3

def load_all():
    
    if not os.path.exists('out/wascan'):
        os.mkdir('out/wascan')

    conn = sqlite3.connect("report/data.db")
    cur = conn.cursor()
    urls = []
    with open('out/wascan/wascan.target', 'w') as f:
        try:
            cur.execute("select * from nmap")
            targets = cur.fetchall()
            # with open('out/hydra/{}.target'.format(service[0]), 'w') as f:
            cols = [t[0] for t in cur.description]
            for target in targets:
                i = 0
                for v in target:
                    if v and v.startswith('[http]'):
                        if cols[i] == 'p443':
                            urls.append(('https',target[0],'443'))
                        else:
                            urls.append(('http',target[0],cols[i][1:]))
                    i += 1                        

            with open("out/wascan/wascan.target", "w") as f:
                for u in urls:
                    url = "{}://{}".format(u[0], u[1]) + ("" if u[0] == 'https' else ":" + u[2])
                    cmd_args = "--url {} --method get".format(url)
                    f.write(cmd_args + " --scan 5\n")
        except Exception as e:
            print(e)
    cur.close()
    return targets
    


def load_from_file(filename):
    targets = []
    data_flag = 0
    with open(filename) as f:
        target = {}
        for l in f:
            if l.upper().startswith("GET ") or l.upper().startswith("POST "):
                data_flag = 0
                method = l.split(" ")[0]
                path = l.split(" ")[1]
                if target:
                    targets.append(target)
                target = {"method": method, "path": path}
            elif l.upper().startswith("HOST:"):
                data_flag = 0
                target['host'] = ":".join(l.split(":")[1:]).strip()
                target['host'] = target['host'].replace(" ", "")
            elif l.upper().startswith("COOKIE"):
                data_flag = 0
                target['cookie']  =  ":".join(l.split(":")[1:]).strip()
                target['cookie'] = target['cookie'].replace(" ", "")
            elif l.upper().startswith("REFERER"):
                data_flag = 0
                target['referer'] =  ":".join(l.split(":")[1:]).strip()
                target['referer'] = target['referer'].replace(" ", "")
            elif not l.strip():
                data_flag = 1
            else:
                if data_flag:
                    target['data'] = l.strip()
                    target['data'] = target['data'].replace(" ", "")
    if target:
        targets.append(target)

    with open("out/wascan/wascan.target", "w") as f:
        for target in targets:
            cmd_args = "--url https://{} --method {}".format(target['host'] + target['path'], target['method'])
            if "referer" in target:
                cmd_args += " --referer {}".format(target['referer'])
            if "cookie" in target:
                cmd_args += "  --cookie {}".format(target['cookie'])
            if "data" in target:
                cmd_args += "  --data {}".format(target['data'])
            # cmd_args += " --scan 1"
            # print(cmd_args + " --scan 1\n")
            f.write(cmd_args + " --scan 5\n")
            # f.write(cmd_args + " --scan 1\n" + cmd_args + " --scan 4\n")
    return targets

if __name__ == "__main__":
    if len(sys.argv) > 1:
        filename = sys.argv[1]
        print(load_from_file(filename))
        # 单个文件解析
    else:
        load_all()
        # 全文件解析




# GET /backend.bak HTTP/1.1
# Host: testphp.vulnweb.com
# Connection: close
# Accept: */*
# User-Agent: Mozilla/4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)