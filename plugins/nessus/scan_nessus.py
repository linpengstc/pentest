import requests
requests.urllib3.disable_warnings()
import json
import sys
import time
import pprint
from multiprocessing import Pool

headers = {
    "X-ApiKeys": "accessKey=e29e2dfb32e9be283d596e5c54903fd5d6ae1baf9a02f341a6f9ec7510c22f72; secretKey=10d8f6d6e300af6bac7f6fb14572cb3bbca073dfd160a71303d25f2430fbb5a5",
    "content-type": "application/json"
}

def create_advance_scan(target):
    # 获取template_id
    r = requests.get("https://localhost:8834/editor/scan/templates", headers=headers, verify=False)
    advance_scans = r.json()['templates']
    advance_scan_uuid = ""
    for advance_scan in advance_scans:
        if advance_scan['title'] == 'Advanced Scan':
            advance_scan_uuid = advance_scan['uuid']

    task = {
        "uuid": advance_scan_uuid,
        "settings": {
            "name": target,
            "enabled": "false",
            "text_targets": target
        }
    }
    r = requests.post("https://localhost:8834/scans", data=json.dumps(task), headers=headers, verify=False)
    scan_id = r.json()['scan']['id']
    return scan_id

def lauch_scan(scan_id):
    requests.post("https://localhost:8834/scans/{}/launch".format(scan_id), headers=headers, verify=False)

def get_status(scan_id):
    r = requests.get("https://localhost:8834/scans/{}".format(scan_id), headers=headers, verify=False)
    return r.json()['info']['status']

def plugin_output(scan_id, host_id, plugin_id):
    p = requests.get("https://localhost:8834/scans/{}/hosts/{}/plugins/{}".format(scan_id, host_id, plugin_id), headers=headers, verify=False).json()
    return p

def report(scan_id):
    r = requests.get("https://localhost:8834/scans/{}".format(scan_id), headers=headers, verify=False)
    hosts = r.json()['hosts']
    results = []
    for host in hosts:
        result = {}
        host_id = host['host_id']
        res = requests.get("https://localhost:8834/scans/{}/hosts/{}".format(scan_id, host_id), headers=headers, verify=False).json()
        target_ip = res['info']['host-ip']
        print("------------------target-----------------")
        print(target_ip)
        print("-----------------------------------------")
        result['ip'] = target_ip
        result['vuls'] = []
        for vul in res['vulnerabilities']:
            v = {}
            plugin_id = vul['plugin_id']
            p = plugin_output(scan_id, host_id, plugin_id)
            print("------------------name-------------------")
            print(p['info']['plugindescription']['pluginname'])
            print("-----------------------------------------")
            v['name'] = p['info']['plugindescription']['pluginname']
            for output in p['outputs']:
                
                print("------------------port-------------------")
                p = list(output['ports'].keys())[0].replace('/', '')
                port = p.strip().split(" ")[0]
                protocol = p.strip().split(" ")[-1]
                print(list(output['ports'].keys())[0].replace('/', ''))
                v['port'] = port
                v['protocol'] = protocol
                print("-----------------------------------------")
                print("------------------output-----------------")
                print(output['plugin_output'])
                v['output'] = output['plugin_output']
                print("------------------severity---------------")
                print(output['severity'])
                v['severity'] = output['severity']
                print("-----------------------------------------")
                result['vuls'].append(v)  
        results.append(result)
    return results
            # print(p['info']['plugindescription']['pluginattributes']['description'])
            # plugin_desc = p['info']['plugindescription'][]

def proc(target, scan_id):
    lauch_scan(scan_id)
    while True:
            time.sleep(10)
            status = get_status(scan_id)
            print("[*] 查询任务 目标:{} 状态:{}".format(target, status))
            if status == "completed":
                break

def save_result(tasks):
    results = []
    for task in tasks:
        r = report(task[1])
        results += r
    with open("out/ness.report", "w") as f:
        f.write(json.dumps(results))
    
if __name__ == "__main__":
    filename = sys.argv[1]
    tasks = []
    # 创建任务
    with open(filename) as f:
        for l in f:
            target = l.strip()
            task_id = create_advance_scan(l)
            tasks.append((target,task_id))
    # 创建5个并发进程
    pool = Pool(5)
    # tasks = [('125.78.252.115', 392), ('49.51.8.209', 394)]
    for task in tasks:
        print(task)
        pool.apply_async(proc, args=task)
    pool.close()
    pool.join()
    save_result(tasks)
