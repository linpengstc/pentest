# -*- coding:utf-8 -*-
import sys
import chardet
from libnmap.parser import NmapParser, NmapParserException
import sqlite3
import codecs
import os
import json

def host_banner(host):
    banner = ""
    for script in host.scripts_results:
        if script['id'] == 'smb-vuln-ms17-010':
            if 'output' in script and script['output'].startswith('ERROR:'):
                continue
            if 'Could not connect' in script['output']:
                continue
            banner = host.address + ",445,"  + '[smb] smb-vuln-ms17-010 '
            return banner

def service_banner(service):
    banner = service.banner
    banner = banner.replace("product: ", "")
    if service.service=="mongodb" and 'not auth' not in banner:
        banner += "匿名访问"
    for script in service.scripts_results:
        if 'output' in script and script['output'].startswith('ERROR:'):
            continue
        info = ''
        if script['id'] == 'http-title':
            if 'elements' in script and 'title' in script['elements'] and script['elements']['title']:
                title = script['elements']['title']
                title = bytes(title,'utf-8')
                title = codecs.escape_decode(title)[0]            
                encoding = chardet.detect(title)['encoding']
                try:
                    info = title.decode(encoding)
                except UnicodeDecodeError:
                    pass
        elif script['id'] == "ms-sql-info":
            info = script['table']['name']
        elif script['id'] == "redis-info":
            info = "匿名访问"
        elif script['id'] == "mongodb-info":
            pass
        elif script['id'] == "ldap-rootdse":
            info = "匿名访问"
        elif script['id'] == "ftp-anon":
            info = "匿名访问"
        elif script['id'] == "ms-sql-empty-password":
            info = "空密码"
        elif script['id'] == "ldap-search":
            pass
        elif script['id'] == 'ssl-cert':
            pass
        elif script['id'] == 'ssl-date':
            pass
        elif script['id'] == 'mysql-info':
            pass
        elif script['id'] == 'dns-nsid':
            pass
        elif script['id'] == 'fingerprint-strings':
            pass
        elif script['id'] == 'http-server-header':
            pass
        elif script['id'] == 'http-grep' and "Elasticsearch" in banner:
            pass
        elif script['id'] == "http-methods":
            pass
        elif script['id'] == 'http-ls':
            pass
        elif script['id'] == "http-robots.txt":
            pass
        elif script['id'] == "http-git":
            info = ".git"
        elif script['id'] == "ssh-hostkey":
            pass
        else:
            if "output" in script:
                # info = script["output"].replace("\n", " ").strip()
                info = script['output']
        if info:
            info = info.replace("\n", " ").strip()
            banner += ("<" + script['id'] + ":" + info + ">")    
    return banner

def parse(portno):
    
    filename = "out/nmap/" + portno + ".nmap"
    if not os.path.exists(filename):
        return
    f = open("out/nmap/" + portno + ".final", 'w')
    report = NmapParser.parse_fromfile(filename)
    for host in report.hosts:
        banner = host_banner(host)
        if banner:
            f.write(banner + "\n")
        for p in host.get_ports():
            service = host.get_service(int(p[0]))
            if service.state == "open":
                banner = '[{}] '.format(service.service)
                banner += service_banner(service)
                print(host.address + "," + str(p[0])  +"," + banner.replace("\n", " "))
                f.write(host.address + "," + str(p[0])  +"," + banner.replace("\n", " ") + "\n")
    f.close()

# 解析ips
def parse_ips():
    f = open("out/nmap/all.final", 'w')
    filename = "out/nmap/all.nmap"
    report = NmapParser.parse_fromfile(filename)
    for host in report.hosts:
        banner = host_banner(host)
        if banner:
            f.write(banner + "\n")
        # print(host.get_ports())
        for p in host.get_ports():
            service = host.get_service(int(p[0]))
            if service.state == "open":
                banner = '[{}] '.format(service.service)
                banner += service_banner(service)
                print(host.address + "," + str(p[0])  +"," + banner.replace("\n", " "))
                f.write(host.address + "," + str(p[0])  +"," + banner.replace("\n", " ") + "\n")


def save_into_sqlite3(portnos, hosts): 
    conn = sqlite3.connect("report/data.db")
    cur = conn.cursor()
    cur.execute('DROP TABLE IF EXISTS nmap')
    fields = []
    for p in portnos:
        fields.append("p" + str(p) + " varchar(500)")
    cur.execute("create table nmap(ip varchar(20)," + ",".join(fields) + ")")
    for h in hosts:
        fields = []
        values = []
        # cur.execute("insert into nmap() values ()")
        values.append(h)
        fields.append('ip')
        for k in hosts[h]:
            fields.append("p" + k)
            values.append(hosts[h][k])
        cur.execute("insert into nmap(" + ",".join(fields) + ") values (" + ",".join(['?']*len(fields)) +  ")", tuple(values))
    conn.commit()
    conn.close()

def save_ips_into_sqlite3(): 
    datas = []
    with open('out/nmap/all.final') as f:
        for l in f:
            datas.append(l.strip())
    conn = sqlite3.connect("report/data.db")
    cur = conn.cursor()
    cur.execute('DROP TABLE IF EXISTS nmap')
    fields = []
    pnos = set([])
    for d in datas:
        pno = d.split(",")[1]
        pnos.add(pno)
    if len(pnos) == 0:
        print("无开放端口，退出!!")
        return
    for pno in pnos:
        fields.append("p" + str(pno) + " varchar(500)")
    cur.execute("create table nmap(ip varchar(20)," + ",".join(fields) + ")")
    kvs = {}
    for d in datas:
        ip = d.split(",")[0]
        port = d.split(",")[1]
        value = "".join(d.split(",")[2:])
        if ip in kvs:
            kvs[ip]["p" + str(port)] = value
        else:
            kvs[ip] = {"p" + str(port):value}
    for h in kvs:
        fields = ['ip']
        values = [h]
        # cur.execute("insert into nmap() values ()")
        for k in kvs[h]:
            fields.append(k)
            values.append(kvs[h][k])
        cur.execute("insert into nmap(" + ",".join(fields) + ") values (" + ",".join(['?']*len(fields)) +  ")", tuple(values))
    conn.commit()
    conn.close()

def final(services):
    with open("out/nmap/all.final", "w") as fout:
        result = {}
        for service in services:
            if not os.path.exists("out/nmap/" + service + ".final"):
                continue
            with open("out/nmap/" + service + ".final") as f:   
                for ll in f:
                    ll = ll.strip()
                    ip = ll.split(",")[0]
                    port = ll.split(",")[1]
                    banner = ll.split(",")[2]
                    if ip in result:
                        result[ip][port] = banner
                    else:
                        result[ip] = {}
                        result[ip][port] = banner
        services = set([])
        for k in result:
            for p in result[k]:
                services.add(p)
        fout.write(json.dumps(result))
    # 保存结果到sqlite中
    save_into_sqlite3(services,result)


if __name__ == "__main__":
    if sys.argv[1] == 'scan_c':
        portnos = []
        with open('data/nmap/port.target') as f:
            for l in f:
                l = l.strip().split(" ")[0]
                if "-" in l:
                    start = int(l.split("-")[0])
                    end = int(l.split("-")[1])
                    for i in range(start, end+1):
                        portnos.append(str(i))
                else:
                    portnos.append(l)
        for portno in portnos:
            parse(portno)
        final(portnos)
    elif sys.argv[1] == 'scan_ips':
        parse_ips()
        save_ips_into_sqlite3()
        
